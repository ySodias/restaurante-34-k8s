name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # terraform_version: 1.4.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_access_key: ${{ secrets.ACCESS_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_nodeName: ${{ secrets.NODENAME }}
          TF_VAR_token: ${{ secrets.TOKEN }}
          TF_VAR_labRole: ${{ secrets.LAB_ROLE }}
          TF_VAR_principalArn: ${{ secrets.PRINCIPALARN }}
          TF_VAR_subnetA: ${{ secrets.SUBNETA }}
          TF_VAR_subnetB: ${{ secrets.SUBNETB }}
          TF_VAR_subnetC: ${{ secrets.SUBNETC }}
          TF_VAR_sgId: ${{ secrets.SGID }}
          TF_VAR_accessConfig: ${{ secrets.ACCESSCONFIG }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        env:
          TF_VAR_access_key: ${{ secrets.ACCESS_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_nodeName: ${{ secrets.NODENAME }}
          TF_VAR_token: ${{ secrets.TOKEN }}
          TF_VAR_labRole: ${{ secrets.LAB_ROLE }}
          TF_VAR_principalArn: ${{ secrets.PRINCIPALARN }}
          TF_VAR_subnetA: ${{ secrets.SUBNETA }}
          TF_VAR_subnetB: ${{ secrets.SUBNETB }}
          TF_VAR_subnetC: ${{ secrets.SUBNETC }}
          TF_VAR_sgId: ${{ secrets.SGID }}
          TF_VAR_accessConfig: ${{ secrets.ACCESSCONFIG }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-session-token: ${{ secrets.TOKEN }}
          aws-region: us-east-1 
  
      - name: Get EC2 instance host
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: ec2-info
        run: |
          instance_host=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=kubectl" "Name=instance-state-name,Values=running"  --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "::set-output name=instance_info::$instance_host"
          
      - name: Executing remote ssh commands using ssh key
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}"
          echo "HOST: ${{ steps.ec2-info.outputs.instance_info }}"
          ssh -i ${{ secrets.AWS_PRIVATE_KEY }} ec2-user@${{ steps.ec2-info.outputs.instance_info }} << 'EOF'
            secret_key=${{ secrets.SECRET_KEY }}
            access_key=${{ secrets.ACCESS_KEY }}
            aws sts get-caller-identity
            
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-01-04/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bash_profile
            
            aws eks update-kubeconfig --region us-east-1 --name restaurant-34-cluster
          EOF

# instalar